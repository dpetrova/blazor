@page "/"

<!-- Menu -->
<h1>Our selection of pizzas</h1>
@foreach (var pizza in State.Menu.Pizzas)
{
    <div class="row">
        <div class="col">
            @pizza.Name
        </div>
        <div class="col">
            @pizza.Price
        </div>
        <div class="col">
            <img src="@SpicinessImage(pizza.Spiciness)"
             alt="@pizza.Spiciness" />
        </div>
        <div class="col">
            @*@onclick event handler uses a lambda function to can pass the pizza variable (known as a closure)*@
            <button class="btn btn-success"
                @onclick="@(() => AddToBasket(pizza))">
                Add
            </button>
        </div>
    </div>
}
<!-- End menu -->
<!-- Shopping Basket -->
@if (State.Basket.Orders.Any())
{
    <h1>Your current order</h1>
    @*
    use LINQ Select method to take an element's id from the Basket.Orders collection and the position in the collection;
    use these to create tuples and iterating over a list of tuples
    *@
    @foreach (var (pizza, pos) in State.Basket.Orders.Select((id, pos) => (State.Menu.GetPizza(id), pos)))
    {
        <div class="row">
            <div class="col">
                @pizza.Name
            </div>
            <div class="col">
                @pizza.Price
            </div>
            <div class="col">
                <button class="btn btn-danger" @onclick="@(() => RemoveFromBasket(pos))">
                    Remove
                </button>
            </div>
        </div>
    }
    <div class="row">
        <div class="col"> Total:</div>
        <div class="col"> @State.TotalPrice </div>
        <div class="col"> </div>
    </div>
}
<!-- End shopping basket -->
<!-- Customer entry -->
<h1>Please enter your details below</h1>
@*EditForm component will render as the HTML <form> element and it is used to wrap all the inputs that require validation.
  Set the Model property to the instance you need to validate.
  When submit button is clicked, the EditForm component performs validation, and when there are no validation errors, it will call the OnValidSubmit event.*@
<EditForm OnValidSubmit="PlaceOrder" Model="@State.Basket.Customer">
    @*indicate that we will use data annotations for validation*@
    <DataAnnotationsValidator />
    @*show the summary validation message for all inputs*@
    <ValidationSummary />
    <div class="form-group row mb-1">
        <label class="col-sm-3 col-form-label" for="FirstName">Name:</label>
        <div class="col-sm-9">
            @*Use InputText component for text field, binding it to the model’s property using the @bind-Value attribute*@
            <InputText class="form-control" @bind-Value="@State.Basket.Customer.Name" />
            <ValidationMessage For="@(() => State.Basket.Customer.Name)" />
        </div>
    </div>
    <div class="form-group row mb-1">
        <label class="col-sm-3 col-form-label" for="LastName">Street:</label>
        <div class="col-sm-9">
            <InputText class="form-control" @bind-Value="@State.Basket.Customer.Street" />
            <ValidationMessage For="@(() => State.Basket.Customer.Street)" />
        </div>
    </div>
    <div class="form-group row mb-1">
        <label class="col-sm-3 col-form-label" for="Birthday">City:</label>
        <div class="col-sm-9">
            <InputText class="form-control" @bind-Value="@State.Basket.Customer.City" />
            <ValidationMessage For="@(() => State.Basket.Customer.City)" />
        </div>
    </div>
    <div class="form-group mb-0">
        <button type="submit" id="BtnRegister" class="btn btn-primary">Checkout</button>
    </div>
</EditForm>
<!-- End customer entry -->
<!-- Only for Debugging -->
<p>@State.ToJson()</p>

@code {
    private State State { get; } = new State()
        {
            Menu = new Menu
            {
                Pizzas = new List<Pizza> {
                    new Pizza(1, "Pepperoni", 8.99M, Spiciness.Spicy ),
                    new Pizza(2, "Margarita", 7.99M, Spiciness.None ),
                    new Pizza(3, "Diabolo", 9.99M, Spiciness.Hot )
                }
            }
        };

    /* convert the name of the enumeration’s value into the URL of an image file (found in the wwwroot/images folder)  */
    private string SpicinessImage(Spiciness spiciness) => $"images/{spiciness.ToString().ToLower()}.png";

    /* add pizza to the shopping basket */
    private void AddToBasket(Pizza pizza)
    {
        Console.WriteLine($"Added pizza {pizza.Name}");
        State.Basket.Add(pizza.Id);
    }

    /* remove pizza from the shopping basket */
    private void RemoveFromBasket(int pos)
    {
        Console.WriteLine($"Removing pizza at pos {pos}");
        State.Basket.RemoveAt(pos);
    }

    /* send the order to the server */
    private void PlaceOrder()
    {
        Console.WriteLine("Placing order");
    }
}