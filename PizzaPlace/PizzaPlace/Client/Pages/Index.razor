@*adding the dependencies *@
@inject IMenuService menuService
@inject IOrderService orderService

@page "/"

<!-- Menu -->
<PizzaList Title="Our selection of pizzas"
           Menu="@State.Menu"
           Selected="@( async (pizza) => AddToBasket(pizza))" />
<!-- End menu -->

<!-- Shopping Basket -->
<ShoppingBasket Title="Your current order"
                Basket="@State.Basket"
                GetPizzaFromId="@State.Menu.GetPizza"
                Selected="@( (pos)=> RemoveFromBasket(pos))" />
<!-- End shopping basket -->

<!-- Customer entry -->
<CustomerEntry Title="Please enter your details below"
               ButtonTitle="Checkout"
               ButtonClass="btn btn-primary"
               Customer="@State.Basket.Customer"
               Submit="@PlaceOrder" />
<!-- End customer entry -->

<!-- Only for Debugging -->
<p>@State.ToJson()</p>

@code {
    private State State { get; } = new State();       
    
    // initialize the State.Menu property in the OnInitializedAsync life cycle method
    // never call asynchronous services in your Blazor component’s constructor; always use OnInitializedAsync or OnParametersSetAsync.
    protected override async Task OnInitializedAsync()
    {
        State.Menu = await menuService.GetMenu();
    }

    /* add pizza to the shopping basket */
    private void AddToBasket(Pizza pizza)
    {
        Console.WriteLine($"Added pizza {pizza.Name}");
        State.Basket.Add(pizza.Id);
    }

    /* remove pizza from the shopping basket */
    private void RemoveFromBasket(int pos)
    {
        Console.WriteLine($"Removing pizza at pos {pos}");
        State.Basket.RemoveAt(pos);
    }

    /* send the order to the server */    
    private async Task PlaceOrder()
    {
        await orderService.PlaceOrder(State.Basket);
    }
}