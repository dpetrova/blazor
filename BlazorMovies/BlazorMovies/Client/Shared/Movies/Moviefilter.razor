@page "/movies/search"

@*dependency injection of configured (in Program.cs) service*@
@*@inject IRepository repository;*@
@inject IMoviesRepository movieRepository;
@inject IGenreRepository genreRepository;
@inject NavigationManager navigationManager

<h3>Search Movie</h3>

<EditForm Model="filterMoviesDTO">
    <div class="d-inline-flex">
        @*text search input*@
        <div class="form-group mb-2">
            <label for="title" class="sr-only">Title</label>
            @*<input type="text" @bind-value="title" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))" placeholder="Movie Title" class="form-control" id="title" />*@
            <input type="text" @bind-value="filterMoviesDTO.Title" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))" placeholder="Movie Title" class="form-control" id="title" />
        </div>

        @*dropdown*@
        <div class="form-group mx-sm-3 mb-2">
            <label for="selectedGenre" class="sr-only">Genre</label
            @*<select class="form-control" @bind="selectedGenre" id="selectedGenre">*@
            <select class="form-control" @bind="filterMoviesDTO.GenreId" id="selectedGenre">
                <option value="0">-- Select a Genre--</option>
                @foreach (var genre in genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
            </select>
        </div>

        @*checkboxes*@
        <div class="form-group mx-sm-3 mb-2">       
            @*<input type="checkbox" @bind="upcomingReleases" class="form-check-input" id="upcomingReleases" />*@
            <input type="checkbox" @bind="filterMoviesDTO.UpcomingReleases" class="form-check-input" id="upcomingReleases" />
            <label for="upcomingReleases" class="form-check-label">Upcoming Releases</label>
        </div
        <div class="form-group mx-sm-3 mb-2">        
            @*<input type="checkbox" @bind="inTheaters" class="form-check-input" id="inTheaters" />*@
            <input type="checkbox" @bind="filterMoviesDTO.InTheater" class="form-check-input" id="inTheaters" />
            <label for="inTheaters" class="form-check-label">In Theaters</label>
        </div>

        @*buttons*@
        <button type="button" @onclick="SearchMovie" class="btn btn-primary mx-sm-3 mb-2">Search</button>
        <button type="button" @onclick="Clear" class="btn btn-danger mb-2">Clear</button>    
    </div>
</EditForm>

@*movies list*@
 <div>
     <h3>Movies</h3>
     <MoviesList Movies="movies" />
 </div>

 @*pagination*@
 <Pagination CurrentPage="filterMoviesDTO.Page" TotalPages="totalPages" SelectPage="SelectPage"/>

@code {
    //private string title = "";
    //private int selectedGenre = 0;    
    //private bool upcomingReleases = false;
    //private bool inTheaters = false;
    //private List<Genre> genres = new List<Genre>(){new Genre(){Id=1, Name="Comedy"}, new Genre(){Id=2, Name="Action"}};
    private List<Genre> genres = new List<Genre>();
    private List<Movie> movies;
    private FilterMoviesDTO filterMoviesDTO = new FilterMoviesDTO();
    private int totalPages;

    private async Task LoadMovies()
    {
        //var queryString = GenerateQueryString();
        //if (!string.IsNullOrWhiteSpace(queryString))
        //{
        //    navigationManager.NavigateTo($"movies/search?{queryString}");
        //}

        var paginatedMoviesResponse = await movieRepository.GetMoviesFiltered(filterMoviesDTO);
        movies = paginatedMoviesResponse.Response;
        totalPages = paginatedMoviesResponse.TotalPages;
    }

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(3000);
        //delegate obtaining the movies to a service
        //movies = repository.GetMovies();
        
        genres = await genreRepository.GetGenres();
        //var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);
        //if (queryStrings != null)
        //{
        //    FillFilterWithQueryStrings(queryStrings);
        //}
        await LoadMovies();
    }    

    private async Task SearchMovie()
    {
        //movies = movies.Where(x => x.Title.Contains(title)).ToList();
        await LoadMovies();
    }

    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchMovie();
        }
    }

    private async Task Clear()
    {
        //title = "";
        //selectedGenre = 0;
        //upcomingReleases = false;
        //inTheaters = false;
        //movies = repository.GetMovies();

        filterMoviesDTO.Title = "";
        filterMoviesDTO.GenreId = 0;
        filterMoviesDTO.UpcomingReleases = false;
        filterMoviesDTO.InTheater = false;
        await LoadMovies();
    }

    private async Task SelectPage(int page)
    {
        filterMoviesDTO.Page = page;
        await LoadMovies();
    }

    /* generate url query string based on filter params */
    //private string GenerateQueryString()
    //{
    //    // genreId=4&title=indiana&inTheater=true....

    //    var queryStringsDict = new Dictionary<string, string>();
    //    queryStringsDict["genreId"] = filterMoviesDTO.GenreId.ToString();
    //    queryStringsDict["title"] = filterMoviesDTO.Title ?? "";
    //    queryStringsDict["inTheaters"] = filterMoviesDTO.InTheater.ToString();
    //    queryStringsDict["upcomingReleases"] = filterMoviesDTO.UpcomingReleases.ToString();
    //    queryStringsDict["page"] = filterMoviesDTO.Page.ToString();

    //    var defaultValue = new List<string>() { "false", "", "0" };        

    //    //get only params that contain values (not default) and construct url query string
    //    return string.Join("&", queryStringsDict
    //        .Where(x => !defaultValue.Contains(x.Value.ToLower()))
    //        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

    //}

    /* read params from the address bar url and apply them */
    //private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    //{
    //    if (queryStrings.ContainsKey("genreId"))
    //    {
    //        filterMoviesDTO.GenreId = int.Parse(queryStrings["genreId"]);
    //    }

    //    if (queryStrings.ContainsKey("title"))
    //    {
    //        filterMoviesDTO.Title = queryStrings["title"];
    //    }

    //    if (queryStrings.ContainsKey("inTheaters"))
    //    {
    //        filterMoviesDTO.InTheater = bool.Parse(queryStrings["inTheaters"]);
    //    }

    //    if (queryStrings.ContainsKey("upcomingReleases"))
    //    {
    //        filterMoviesDTO.UpcomingReleases = bool.Parse(queryStrings["upcomingReleases"]);
    //    }

    //    if (queryStrings.ContainsKey("page"))
    //    {
    //        filterMoviesDTO.Page = int.Parse(queryStrings["page"]);
    //    }
    //}
}
