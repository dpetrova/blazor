@inject IPeopleRepository peopleRepository

<EditForm Model="Movie" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />

    @*title*@
    <div class="form-group">
        <label>Title:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Title" />
            <ValidationMessage For="@(() => Movie.Title)" />
        </div>
    </div>

    @*in theater*@
    <div class="form-group">
        <label>In Theaters:</label>
        <div>
            <InputCheckbox @bind-Value="@Movie.InTheater" />
            <ValidationMessage For="@(() => Movie.InTheater)" />
        </div>
    </div>

    @*trailer*@
    <div class="form-group">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Trailer" />
            <ValidationMessage For="@(() => Movie.Trailer)" />
        </div>
    </div>

    @*release date*@
    <div class="form-group">
        <label>Release Date:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Movie.ReleaseDate" />
            <ValidationMessage For="@(() => Movie.ReleaseDate)" />
        </div>
    </div>

    @*summary*@
    <div class="form-group form-markdown">
        <MarkdownInput @bind-Value="Movie.Summary" Label="Summary" ForLambda="@(() => Movie.Summary)" />
    </div>

    @*poster*@
    <div class="form-group">
        <ImageInput Label="Poster" OnSelectedImage="PictureSelected" ImageURL="@imageUrl" />
    </div>

    @*select genres*@
    <div class="form-group">
        <label>Genres:</label>
        <div>
            <MultipleSelector Selected="Selected" NotSelected="NotSelected"/>
        </div>
    </div>

    @*select and reorder actors*@
    <div class="form-group">
        <label>Actors:</label>
        <div>
            <MultipleSelectorTypeahead Context="person" SearchMethod="SearchMethod" SelectedElements="SelectedActors">
                <MyResultTemplate>
                    <img src="@person.Photo" style="width: 50px;" />
                    @person.Name
                </MyResultTemplate>

                <MyListTemplate>
                    @person.Name /  <input type="text" placeholder="Character" @bind="@person.Character" />
                </MyListTemplate>
            </MultipleSelectorTypeahead>
        </div>
    </div>

    <button class="btn btn-success mt-2" type="submit">Save Changes</button>

    <p>Validation summary:</p>
    @*summarize all validation rules and show summary validation error message*@
    <ValidationSummary />
</EditForm>

@code {
    [Parameter]
    public Movie Movie { get; set; }

    [Parameter]
    public EventCallback Submit { get; set; }

    [Parameter]
    public List<Genre> NotSelectedGenres { get; set; } = new List<Genre>();

    [Parameter]
    public List<Genre> SelectedGenres { get; set; } = new List<Genre>();

    [Parameter]
    public List<Person> SelectedActors { get; set; } = new List<Person>();

    private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();

    private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();

    private string imageUrl;

    protected override void OnInitialized()
    {
        //if update movie which may already have poster
        if (!string.IsNullOrEmpty(Movie.Poster))
        {
            imageUrl = Movie.Poster;
            //to prevent sending the image again if the image is not updated
            //if the user update a movie that have a poster, but the poster is not updated -> we do not need to send the picture every time when we update a movie
            Movie.Poster = null;
        }

        //convert selected/nonselected genres to selected/nonselected model
        Selected = SelectedGenres.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        NotSelected = NotSelectedGenres.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
    }

    private void PictureSelected(string imageBase64)
    {
        Movie.Poster = imageBase64;
        imageUrl = null;
    }

    private async Task<IEnumerable<Person>> SearchMethod(string searchText)
    {
        return await peopleRepository.GetPeopleByName(searchText);

        //await Task.Delay(3000);
        //return new List<Person>() { 
        //    new Person() { Id = 1, Name = "Harrison Ford", Photo = "https://upload.wikimedia.org/wikipedia/en/b/be/Han_Solo_depicted_in_promotional_image_for_Star_Wars_%281977%29.jpg" },
        //    new Person() { Id = 2, Name = "Carrie Fisher", Photo = "https://upload.wikimedia.org/wikipedia/en/1/1b/Princess_Leia%27s_characteristic_hairstyle.jpg" } };
    }

    private async Task OnDataAnnotationsValidated()
    {
        //map selected MultipleSelectorModel items to MoviesGenres
        Movie.MoviesGenres = Selected.Select(x => new MoviesGenres() { GenreId = int.Parse(x.Key) }).ToList();
        //map selected Person items to MoviesActors
        Movie.MoviesActors = SelectedActors.Select(x => new MoviesActors() { PersonId = x.Id, Character = x.Character }).ToList();

        if (!string.IsNullOrEmpty(Movie.Poster))
        {
            imageUrl = null;
        }

        await Submit.InvokeAsync(null);
    }
}
