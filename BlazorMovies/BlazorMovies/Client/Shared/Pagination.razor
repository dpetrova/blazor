<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="@(() => SelectPageInternal(link))" style="cursor: pointer;" class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter]
    public int CurrentPage { get; set; } = 1;
    [Parameter]
    public int TotalPages { get; set; }
    [Parameter]
    public int Radius { get; set; } = 3;
    [Parameter]
    public EventCallback<int> SelectPage { get; set; }

    private List<LinkModel> links;

    protected override void OnParametersSet()
    {
        LoadPages();
        base.OnParametersSet();
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();

        //prev link
        bool isPrevEnabled = CurrentPage != 1;
        int prevPage = CurrentPage - 1;
        links.Add(new LinkModel(prevPage, isPrevEnabled, "Prev"));

        //pages show in desired radius
        for (int i = 1; i <= TotalPages; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new LinkModel(i){Active = CurrentPage == i});
            }
        }

        //next link
        bool isNextEnabled = CurrentPage != TotalPages;
        int nextPage = CurrentPage + 1;
        links.Add(new LinkModel(nextPage, isNextEnabled, "Next"));
    }

    private async Task SelectPageInternal(LinkModel link)
    {
        if (link.Page == CurrentPage) return;
        if (!link.Enabled) return;

        CurrentPage = link.Page;
        await SelectPage.InvokeAsync(link.Page);
    }

    class LinkModel
    {
        //constructor with 1 parameter
        public LinkModel(int page) 
            : this(page, true)
        {

        }

        //constructor with 2 parameters
        public LinkModel(int page, bool enabled)
            : this(page, enabled, page.ToString())
        {

        }

        //constructor with 3 parameters
        public LinkModel(int page, bool enabled, string text)        
        {
            this.Page = page;
            this.Enabled = enabled;
            this.Text = text;
        }

        public int Page { get; set; }       
        public string Text { get; set; }
        public bool Enabled { get; set; }
        public bool Active { get; set; }
    }
}
