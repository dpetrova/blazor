@*inject service for invoking JS functions*@
@inject IJSRuntime js;

@*checbox for allowing/or not to manipulate movies*@
@*using data binding:*@
<label for="allowedToManipulate">Allowed to manipulate (using data binding)</label>
<input type="checkbox" @bind="allowedToManipulate" />
<br />

@*using onchange event:*@
<label for="allowedToManipulate">Allowed to manipulate (using onchange event)</label>
<input type="checkbox" @onchange="@(() => allowedToManipulate = !allowedToManipulate)" />

@*render list of movies*@
<GenericList List="Movies">
    @*pass content to be rendered in the component*@
    @*<span style="color: blue">Here we will display movies...</span>*@

    @*when have more than one content to pass use named tags:*@
    <LoadingTemplate>
        <span style="color: blue">Loading...</span>
    </LoadingTemplate>
    <NullTemplate>
        <span style="color: red">No records to display</span>
    </NullTemplate>
    <ItemTemplate Context="movie">
        @*use default context to access passed variable to generic render fragment*@
        @*<IndividualMovie Movie="context" DisplayButtons="allowedToManipulate" DeleteMovie="Delete" />*@

        @*access passed variable to generic render fragment as it set in Context*@
        <IndividualMovie Movie="movie" DisplayButtons="allowedToManipulate" DeleteMovie="Delete" />
    </ItemTemplate>
</GenericList>

@code {
    //data recieved from parent
    [Parameter]
    public List<Movie> Movies { get; set; }

    bool allowedToManipulate = true;

    private async Task Delete(Movie movie)
    {
        // var confirmed = await js.InvokeAsync<bool>("confirm", $"Are you sure to delete {movie.Title}");

        //use function from created extension method
        var confirmed = await js.Confirm($"Are you sure to delete {movie.Title}");        

        if (confirmed)
        {
            Movies.Remove(movie);
        }

        js.Log($"The movie {movie.Title} is deleted!");
        await js.LogFromCustomJsFunction("This is log from custom created JS function");
    }
}
