@*add the path for routing*@
@page "/fetchdata"
@*use @using statements in Razor to refer to classes from another namespaceneed (need this because you use the WeatherForecast class from the Shared project)*@
@using BlazorMovies.Shared
@*inject the HttpClient instance (HttpClient class is used to talk to the server)*@
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // declare a field forecasts to hold an array of WeatherForecast instances; initially, it is a null
    private WeatherForecast[]? forecasts;

    //Blazor components have two methods that get called when the component has been initialized: OnInitialized and OnInitializedAsync.
    //because you fetch the data from the server using an asynchronous API, you need to use OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        //all communication between the client and the server passes through the HttpClient class
        //its role is to make the HTTP request to the server and to expose the result from the server
        //the GetFromJsonAsync<>("SOME URI") extension method makes an asynchronous GET request to the specified URI 
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }
}
