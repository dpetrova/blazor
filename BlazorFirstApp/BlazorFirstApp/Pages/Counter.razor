@using System.Threading

@*use page directive to specify a route;
show this page when routing to /counter or /do-counting/:startingValue*@
@page "/counter"
@page "/do-counting/{startingValue:int}"

@*use layout directive to specify the layout for this page only*@
@*@layout MainLayout*@

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

@*one-way data binding*@
<p role="status">Current count: <span class="@backgroundColor">@currentCount</span></p>

@*two-way data binding (change when input loses focus)*@
<p>Increment by: <input type="number" @bind="@IncrementAmount" /></p>

@*binding to other events (change immidiately)*@
<p>Increment by: <input type="number" @bind="@IncrementAmount" @bind:event="oninput" /></p>

@*handling keypress events*@
<p>Increment by +/- <input type="number" @bind="@IncrementAmount" @onkeypress="KeyHandler" @onkeypress:preventDefault /></p>

@*event and attribute binding*@
<button class="btn btn-primary" @onclick="IncrementCount" disabled="@(currentCount >= 100)">Click me!</button>

@*stop Event Propagation*@
<p>
    <div style="width: 400px; height: 300px; background: yellow" @onmousemove="OuterMouseMove">
        @outerPos
        <div style="width: 300px; height: 200px; background: green; margin:50px" @onmousemove="InnerMouseMove" @onmousemove:stopPropagation>@innerPos</div>
    </div>
</p>

@*format dates*@
<p>
    <h5>Date Format:</h5>
    <input @bind="Today" @bind:format="yyyy-MM-dd" />
    <button class="btn btn-primary" @onclick="IncrementDate">Next Day</button>
</p>

@*force update DOm when background threads*@
<p>
    <button class="btn btn-secondary" @onclick="AutoIncrement">Auto Increment</button>
</p>

@code {
    private int currentCount = 0;
    string backgroundColor = "red-background";
    private string outerPos = "Nothing yet";
    private string innerPos = "Nothing yet";
    private DateTime Today { get; set; } = DateTime.Now;

    [Parameter]
    public int StartingValue { get; set; } = 0;

    // prop passed parent -> child
    [Parameter]
    public int IncrementAmount { get; set; } = 1;

    // set currentCount to passed route.param startingValue
    protected override void OnParametersSet()
    {
        currentCount = StartingValue;
        base.OnParametersSet();
    }

    private void IncrementCount()
    {
        currentCount += IncrementAmount;
        backgroundColor = (currentCount % 2 == 0) ? "red-background" : "yellow-background";
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "+")
        {
            IncrementAmount += 1;
        }
        if (e.Key == "-")
        {
            IncrementAmount -= 1;
        }
    }

    private void OuterMouseMove(MouseEventArgs e) => outerPos = $"Mouse last at {e.ClientX}x{e.ClientY}";

    private void InnerMouseMove(MouseEventArgs e) => innerPos = $"Mouse last at {e.ClientX}x{e.ClientY}";

    private void IncrementDate() => Today = Today.AddDays(1);

    private void AutoIncrement()
    {
        var timer = new Timer(
            callback: (_) => {
                IncrementCount();
                this.InvokeAsync(() => this.StateHasChanged()); //tell Blazor manually to update the DOM
            },
            state: null,
            dueTime: TimeSpan.FromSeconds(1),
            period: TimeSpan.FromSeconds(1)
        );
    }
}
