@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using BlazorFirstApp.Shared
@using BlazorFirstApp.Data

@*dependency injection of a service*@
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>*@

    @*using Table templated component*@
    <Table Items="forecasts" TItem="WeatherForecast">
        <Header>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </Header>
        <Row Context="forecast">
            <!-- by default called context, but you can override the name of the argument -->
            <td>@forecast.Date</td>
            <td>@forecast.TemperatureC</td>
            <td>@forecast.TemperatureF</td>
            <td>@forecast.Summary</td>
        </Row>
        <Footer>
        <td colspan="4">Spring is in the air!</td>
        </Footer>
    </Table>

    @*using ListView templated component*@
    <ListView Items="forecasts">
        <ItemTemplate>
            @forecastTemplate(context)
        </ItemTemplate>
    </ListView>
}

@code {
    private WeatherForecast[]? forecasts;

    // use a lambda function taking the forecast as an argument which returns a RenderFragment<TItem>
    RenderFragment<WeatherForecast> forecastTemplate = (forecast) => @<li>@forecast.Date.ToLongDateString() - @forecast.Summary</li>;

    // get forecasts async
    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }    
}
